// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"bosh-vmrun-cpi/driver"
	"sync"
	"time"
)

type FakeRetryFileLock struct {
	TryStub        func(string, time.Duration, func() error) error
	tryMutex       sync.RWMutex
	tryArgsForCall []struct {
		arg1 string
		arg2 time.Duration
		arg3 func() error
	}
	tryReturns struct {
		result1 error
	}
	tryReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRetryFileLock) Try(arg1 string, arg2 time.Duration, arg3 func() error) error {
	fake.tryMutex.Lock()
	ret, specificReturn := fake.tryReturnsOnCall[len(fake.tryArgsForCall)]
	fake.tryArgsForCall = append(fake.tryArgsForCall, struct {
		arg1 string
		arg2 time.Duration
		arg3 func() error
	}{arg1, arg2, arg3})
	fake.recordInvocation("Try", []interface{}{arg1, arg2, arg3})
	fake.tryMutex.Unlock()
	if fake.TryStub != nil {
		return fake.TryStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.tryReturns
	return fakeReturns.result1
}

func (fake *FakeRetryFileLock) TryCallCount() int {
	fake.tryMutex.RLock()
	defer fake.tryMutex.RUnlock()
	return len(fake.tryArgsForCall)
}

func (fake *FakeRetryFileLock) TryCalls(stub func(string, time.Duration, func() error) error) {
	fake.tryMutex.Lock()
	defer fake.tryMutex.Unlock()
	fake.TryStub = stub
}

func (fake *FakeRetryFileLock) TryArgsForCall(i int) (string, time.Duration, func() error) {
	fake.tryMutex.RLock()
	defer fake.tryMutex.RUnlock()
	argsForCall := fake.tryArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRetryFileLock) TryReturns(result1 error) {
	fake.tryMutex.Lock()
	defer fake.tryMutex.Unlock()
	fake.TryStub = nil
	fake.tryReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRetryFileLock) TryReturnsOnCall(i int, result1 error) {
	fake.tryMutex.Lock()
	defer fake.tryMutex.Unlock()
	fake.TryStub = nil
	if fake.tryReturnsOnCall == nil {
		fake.tryReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.tryReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRetryFileLock) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.tryMutex.RLock()
	defer fake.tryMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRetryFileLock) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ driver.RetryFileLock = new(FakeRetryFileLock)
